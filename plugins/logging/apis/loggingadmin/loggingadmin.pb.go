// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v1.0.0
// source: github.com/rancher/opni/plugins/logging/apis/loggingadmin/loggingadmin.proto

package loggingadmin

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpensearchCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalURL string `protobuf:"bytes,1,opt,name=ExternalURL,proto3" json:"ExternalURL,omitempty"`
	// +optional
	NodePools     []*OpensearchNodeDetails `protobuf:"bytes,2,rep,name=NodePools,proto3" json:"NodePools,omitempty"`
	Dashboards    *DashboardsDetails       `protobuf:"bytes,3,opt,name=Dashboards,proto3,oneof" json:"Dashboards,omitempty"`
	DataRetention *string                  `protobuf:"bytes,4,opt,name=DataRetention,proto3,oneof" json:"DataRetention,omitempty"`
}

func (x *OpensearchCluster) Reset() {
	*x = OpensearchCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpensearchCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpensearchCluster) ProtoMessage() {}

func (x *OpensearchCluster) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpensearchCluster.ProtoReflect.Descriptor instead.
func (*OpensearchCluster) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{0}
}

func (x *OpensearchCluster) GetExternalURL() string {
	if x != nil {
		return x.ExternalURL
	}
	return ""
}

func (x *OpensearchCluster) GetNodePools() []*OpensearchNodeDetails {
	if x != nil {
		return x.NodePools
	}
	return nil
}

func (x *OpensearchCluster) GetDashboards() *DashboardsDetails {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

func (x *OpensearchCluster) GetDataRetention() string {
	if x != nil && x.DataRetention != nil {
		return *x.DataRetention
	}
	return ""
}

type OpensearchClusterV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalURL       string               `protobuf:"bytes,1,opt,name=externalURL,proto3" json:"externalURL,omitempty"`
	DataNodes         *DataDetails         `protobuf:"bytes,2,opt,name=dataNodes,proto3" json:"dataNodes,omitempty"`
	IngestNodes       *IngestDetails       `protobuf:"bytes,3,opt,name=ingestNodes,proto3,oneof" json:"ingestNodes,omitempty"`
	ControlplaneNodes *ControlplaneDetails `protobuf:"bytes,4,opt,name=controlplaneNodes,proto3,oneof" json:"controlplaneNodes,omitempty"`
	Dashboards        *DashboardsDetails   `protobuf:"bytes,5,opt,name=dashboards,proto3,oneof" json:"dashboards,omitempty"`
	DataRetention     *string              `protobuf:"bytes,6,opt,name=dataRetention,proto3,oneof" json:"dataRetention,omitempty"`
}

func (x *OpensearchClusterV2) Reset() {
	*x = OpensearchClusterV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpensearchClusterV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpensearchClusterV2) ProtoMessage() {}

func (x *OpensearchClusterV2) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpensearchClusterV2.ProtoReflect.Descriptor instead.
func (*OpensearchClusterV2) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{1}
}

func (x *OpensearchClusterV2) GetExternalURL() string {
	if x != nil {
		return x.ExternalURL
	}
	return ""
}

func (x *OpensearchClusterV2) GetDataNodes() *DataDetails {
	if x != nil {
		return x.DataNodes
	}
	return nil
}

func (x *OpensearchClusterV2) GetIngestNodes() *IngestDetails {
	if x != nil {
		return x.IngestNodes
	}
	return nil
}

func (x *OpensearchClusterV2) GetControlplaneNodes() *ControlplaneDetails {
	if x != nil {
		return x.ControlplaneNodes
	}
	return nil
}

func (x *OpensearchClusterV2) GetDashboards() *DashboardsDetails {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

func (x *OpensearchClusterV2) GetDataRetention() string {
	if x != nil && x.DataRetention != nil {
		return *x.DataRetention
	}
	return ""
}

type DataPersistence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      *bool   `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	StorageClass *string `protobuf:"bytes,2,opt,name=storageClass,proto3,oneof" json:"storageClass,omitempty"`
}

func (x *DataPersistence) Reset() {
	*x = DataPersistence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPersistence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPersistence) ProtoMessage() {}

func (x *DataPersistence) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPersistence.ProtoReflect.Descriptor instead.
func (*DataPersistence) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{2}
}

func (x *DataPersistence) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DataPersistence) GetStorageClass() string {
	if x != nil && x.StorageClass != nil {
		return *x.StorageClass
	}
	return ""
}

type CPUResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Limit   string `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CPUResource) Reset() {
	*x = CPUResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUResource) ProtoMessage() {}

func (x *CPUResource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUResource.ProtoReflect.Descriptor instead.
func (*CPUResource) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{3}
}

func (x *CPUResource) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *CPUResource) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

type OpensearchNodeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string            `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Replicas           *int32            `protobuf:"varint,2,opt,name=Replicas,proto3,oneof" json:"Replicas,omitempty"`
	DiskSize           string            `protobuf:"bytes,3,opt,name=DiskSize,proto3" json:"DiskSize,omitempty"`
	MemoryLimit        string            `protobuf:"bytes,4,opt,name=MemoryLimit,proto3" json:"MemoryLimit,omitempty"`
	CPUResources       *CPUResource      `protobuf:"bytes,5,opt,name=CPUResources,proto3,oneof" json:"CPUResources,omitempty"`
	EnableAntiAffinity *bool             `protobuf:"varint,6,opt,name=EnableAntiAffinity,proto3,oneof" json:"EnableAntiAffinity,omitempty"`
	NodeSelector       map[string]string `protobuf:"bytes,7,rep,name=NodeSelector,proto3" json:"NodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tolerations        []*v1.Toleration  `protobuf:"bytes,8,rep,name=Tolerations,proto3" json:"Tolerations,omitempty"`
	Roles              []string          `protobuf:"bytes,9,rep,name=Roles,proto3" json:"Roles,omitempty"`
	Persistence        *DataPersistence  `protobuf:"bytes,10,opt,name=Persistence,proto3,oneof" json:"Persistence,omitempty"`
}

func (x *OpensearchNodeDetails) Reset() {
	*x = OpensearchNodeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpensearchNodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpensearchNodeDetails) ProtoMessage() {}

func (x *OpensearchNodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpensearchNodeDetails.ProtoReflect.Descriptor instead.
func (*OpensearchNodeDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{4}
}

func (x *OpensearchNodeDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpensearchNodeDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *OpensearchNodeDetails) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

func (x *OpensearchNodeDetails) GetMemoryLimit() string {
	if x != nil {
		return x.MemoryLimit
	}
	return ""
}

func (x *OpensearchNodeDetails) GetCPUResources() *CPUResource {
	if x != nil {
		return x.CPUResources
	}
	return nil
}

func (x *OpensearchNodeDetails) GetEnableAntiAffinity() bool {
	if x != nil && x.EnableAntiAffinity != nil {
		return *x.EnableAntiAffinity
	}
	return false
}

func (x *OpensearchNodeDetails) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *OpensearchNodeDetails) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *OpensearchNodeDetails) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *OpensearchNodeDetails) GetPersistence() *DataPersistence {
	if x != nil {
		return x.Persistence
	}
	return nil
}

type DashboardsDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled   *bool                 `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Replicas  *int32                `protobuf:"varint,2,opt,name=replicas,proto3,oneof" json:"replicas,omitempty"`
	Resources *ResourceRequirements `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *DashboardsDetails) Reset() {
	*x = DashboardsDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardsDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardsDetails) ProtoMessage() {}

func (x *DashboardsDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardsDetails.ProtoReflect.Descriptor instead.
func (*DashboardsDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{5}
}

func (x *DashboardsDetails) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DashboardsDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *DashboardsDetails) GetResources() *ResourceRequirements {
	if x != nil {
		return x.Resources
	}
	return nil
}

type UpgradeAvailableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradePending bool `protobuf:"varint,1,opt,name=upgradePending,proto3" json:"upgradePending,omitempty"`
}

func (x *UpgradeAvailableResponse) Reset() {
	*x = UpgradeAvailableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeAvailableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeAvailableResponse) ProtoMessage() {}

func (x *UpgradeAvailableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeAvailableResponse.ProtoReflect.Descriptor instead.
func (*UpgradeAvailableResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{6}
}

func (x *UpgradeAvailableResponse) GetUpgradePending() bool {
	if x != nil {
		return x.UpgradePending
	}
	return false
}

type StorageClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageClasses []string `protobuf:"bytes,1,rep,name=storageClasses,proto3" json:"storageClasses,omitempty"`
}

func (x *StorageClassResponse) Reset() {
	*x = StorageClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageClassResponse) ProtoMessage() {}

func (x *StorageClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageClassResponse.ProtoReflect.Descriptor instead.
func (*StorageClassResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{7}
}

func (x *StorageClassResponse) GetStorageClasses() []string {
	if x != nil {
		return x.StorageClasses
	}
	return nil
}

type ResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests *ComputeResourceQuantities `protobuf:"bytes,1,opt,name=requests,proto3" json:"requests,omitempty"`
	Limits   *ComputeResourceQuantities `protobuf:"bytes,2,opt,name=limits,proto3" json:"limits,omitempty"`
}

func (x *ResourceRequirements) Reset() {
	*x = ResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirements) ProtoMessage() {}

func (x *ResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirements.ProtoReflect.Descriptor instead.
func (*ResourceRequirements) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceRequirements) GetRequests() *ComputeResourceQuantities {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *ResourceRequirements) GetLimits() *ComputeResourceQuantities {
	if x != nil {
		return x.Limits
	}
	return nil
}

type ComputeResourceQuantities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *ComputeResourceQuantities) Reset() {
	*x = ComputeResourceQuantities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeResourceQuantities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeResourceQuantities) ProtoMessage() {}

func (x *ComputeResourceQuantities) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeResourceQuantities.ProtoReflect.Descriptor instead.
func (*ComputeResourceQuantities) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{9}
}

func (x *ComputeResourceQuantities) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *ComputeResourceQuantities) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Details string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{10}
}

func (x *StatusResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *StatusResponse) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type DataDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas           *int32            `protobuf:"varint,1,opt,name=replicas,proto3,oneof" json:"replicas,omitempty"`
	DiskSize           string            `protobuf:"bytes,2,opt,name=diskSize,proto3" json:"diskSize,omitempty"`
	MemoryLimit        string            `protobuf:"bytes,3,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`
	CpuResources       *CPUResource      `protobuf:"bytes,4,opt,name=cpuResources,proto3,oneof" json:"cpuResources,omitempty"`
	EnableAntiAffinity *bool             `protobuf:"varint,5,opt,name=enableAntiAffinity,proto3,oneof" json:"enableAntiAffinity,omitempty"`
	NodeSelector       map[string]string `protobuf:"bytes,6,rep,name=nodeSelector,proto3" json:"nodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tolerations        []*v1.Toleration  `protobuf:"bytes,7,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	Persistence        *DataPersistence  `protobuf:"bytes,8,opt,name=persistence,proto3,oneof" json:"persistence,omitempty"`
}

func (x *DataDetails) Reset() {
	*x = DataDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDetails) ProtoMessage() {}

func (x *DataDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDetails.ProtoReflect.Descriptor instead.
func (*DataDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{11}
}

func (x *DataDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *DataDetails) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

func (x *DataDetails) GetMemoryLimit() string {
	if x != nil {
		return x.MemoryLimit
	}
	return ""
}

func (x *DataDetails) GetCpuResources() *CPUResource {
	if x != nil {
		return x.CpuResources
	}
	return nil
}

func (x *DataDetails) GetEnableAntiAffinity() bool {
	if x != nil && x.EnableAntiAffinity != nil {
		return *x.EnableAntiAffinity
	}
	return false
}

func (x *DataDetails) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *DataDetails) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *DataDetails) GetPersistence() *DataPersistence {
	if x != nil {
		return x.Persistence
	}
	return nil
}

type IngestDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas           *int32            `protobuf:"varint,1,opt,name=replicas,proto3,oneof" json:"replicas,omitempty"`
	MemoryLimit        string            `protobuf:"bytes,2,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`
	CpuResources       *CPUResource      `protobuf:"bytes,3,opt,name=cpuResources,proto3,oneof" json:"cpuResources,omitempty"`
	EnableAntiAffinity *bool             `protobuf:"varint,4,opt,name=enableAntiAffinity,proto3,oneof" json:"enableAntiAffinity,omitempty"`
	NodeSelector       map[string]string `protobuf:"bytes,5,rep,name=nodeSelector,proto3" json:"nodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tolerations        []*v1.Toleration  `protobuf:"bytes,6,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
}

func (x *IngestDetails) Reset() {
	*x = IngestDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestDetails) ProtoMessage() {}

func (x *IngestDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestDetails.ProtoReflect.Descriptor instead.
func (*IngestDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{12}
}

func (x *IngestDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *IngestDetails) GetMemoryLimit() string {
	if x != nil {
		return x.MemoryLimit
	}
	return ""
}

func (x *IngestDetails) GetCpuResources() *CPUResource {
	if x != nil {
		return x.CpuResources
	}
	return nil
}

func (x *IngestDetails) GetEnableAntiAffinity() bool {
	if x != nil && x.EnableAntiAffinity != nil {
		return *x.EnableAntiAffinity
	}
	return false
}

func (x *IngestDetails) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *IngestDetails) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

type ControlplaneDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas     *int32            `protobuf:"varint,1,opt,name=replicas,proto3,oneof" json:"replicas,omitempty"`
	NodeSelector map[string]string `protobuf:"bytes,2,rep,name=nodeSelector,proto3" json:"nodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tolerations  []*v1.Toleration  `protobuf:"bytes,3,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	Persistence  *DataPersistence  `protobuf:"bytes,4,opt,name=persistence,proto3,oneof" json:"persistence,omitempty"`
}

func (x *ControlplaneDetails) Reset() {
	*x = ControlplaneDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlplaneDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlplaneDetails) ProtoMessage() {}

func (x *ControlplaneDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlplaneDetails.ProtoReflect.Descriptor instead.
func (*ControlplaneDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{13}
}

func (x *ControlplaneDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *ControlplaneDetails) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *ControlplaneDetails) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *ControlplaneDetails) GetPersistence() *DataPersistence {
	if x != nil {
		return x.Persistence
	}
	return nil
}

var File_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDesc = []byte{
	0x0a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x52, 0x4c, 0x12, 0x41, 0x0a, 0x09, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x44, 0x0a,
	0x0a, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xc2, 0x03, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x52, 0x4c, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0a,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x48, 0x02, 0x52, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x3d, 0x0a, 0x0b,
	0x43, 0x50, 0x55, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x82, 0x05, 0x0a, 0x15,
	0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x43, 0x50, 0x55, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x50,
	0x55, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0c, 0x43, 0x50, 0x55,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x12, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x59, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0b,
	0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x03, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x43, 0x50, 0x55,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0xae, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x22, 0x42, 0x0a, 0x18, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x3e, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x42, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0xc4, 0x04, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42,
	0x0a, 0x0c, 0x63, 0x70, 0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x01, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x03,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x70, 0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xd6, 0x03, 0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x63,
	0x70, 0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x50, 0x55, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0c,
	0x63, 0x70, 0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x12, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x70, 0x75, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x22,
	0xf5, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x32, 0x81, 0x06, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x12, 0x10, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x1a,
	0x10, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x76, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x44, 0x6f, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13,
	0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x2f, 0x64, 0x6f, 0x12, 0x70, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x22, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x87, 0x06, 0x0a, 0x0e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x32, 0x12, 0x6b,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21,
	0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x32, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10,
	0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x79, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x32, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x1a, 0x10, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x10, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x44, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x64, 0x6f, 0x12, 0x70, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x64, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c,
	0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescData = file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDesc
)

func file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescData)
	})
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescData
}

var file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_goTypes = []interface{}{
	(*OpensearchCluster)(nil),         // 0: loggingadmin.OpensearchCluster
	(*OpensearchClusterV2)(nil),       // 1: loggingadmin.OpensearchClusterV2
	(*DataPersistence)(nil),           // 2: loggingadmin.DataPersistence
	(*CPUResource)(nil),               // 3: loggingadmin.CPUResource
	(*OpensearchNodeDetails)(nil),     // 4: loggingadmin.OpensearchNodeDetails
	(*DashboardsDetails)(nil),         // 5: loggingadmin.DashboardsDetails
	(*UpgradeAvailableResponse)(nil),  // 6: loggingadmin.UpgradeAvailableResponse
	(*StorageClassResponse)(nil),      // 7: loggingadmin.StorageClassResponse
	(*ResourceRequirements)(nil),      // 8: loggingadmin.ResourceRequirements
	(*ComputeResourceQuantities)(nil), // 9: loggingadmin.ComputeResourceQuantities
	(*StatusResponse)(nil),            // 10: loggingadmin.StatusResponse
	(*DataDetails)(nil),               // 11: loggingadmin.DataDetails
	(*IngestDetails)(nil),             // 12: loggingadmin.IngestDetails
	(*ControlplaneDetails)(nil),       // 13: loggingadmin.ControlplaneDetails
	nil,                               // 14: loggingadmin.OpensearchNodeDetails.NodeSelectorEntry
	nil,                               // 15: loggingadmin.DataDetails.NodeSelectorEntry
	nil,                               // 16: loggingadmin.IngestDetails.NodeSelectorEntry
	nil,                               // 17: loggingadmin.ControlplaneDetails.NodeSelectorEntry
	(*v1.Toleration)(nil),             // 18: k8s.io.api.core.v1.Toleration
	(*emptypb.Empty)(nil),             // 19: google.protobuf.Empty
}
var file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_depIdxs = []int32{
	4,  // 0: loggingadmin.OpensearchCluster.NodePools:type_name -> loggingadmin.OpensearchNodeDetails
	5,  // 1: loggingadmin.OpensearchCluster.Dashboards:type_name -> loggingadmin.DashboardsDetails
	11, // 2: loggingadmin.OpensearchClusterV2.dataNodes:type_name -> loggingadmin.DataDetails
	12, // 3: loggingadmin.OpensearchClusterV2.ingestNodes:type_name -> loggingadmin.IngestDetails
	13, // 4: loggingadmin.OpensearchClusterV2.controlplaneNodes:type_name -> loggingadmin.ControlplaneDetails
	5,  // 5: loggingadmin.OpensearchClusterV2.dashboards:type_name -> loggingadmin.DashboardsDetails
	3,  // 6: loggingadmin.OpensearchNodeDetails.CPUResources:type_name -> loggingadmin.CPUResource
	14, // 7: loggingadmin.OpensearchNodeDetails.NodeSelector:type_name -> loggingadmin.OpensearchNodeDetails.NodeSelectorEntry
	18, // 8: loggingadmin.OpensearchNodeDetails.Tolerations:type_name -> k8s.io.api.core.v1.Toleration
	2,  // 9: loggingadmin.OpensearchNodeDetails.Persistence:type_name -> loggingadmin.DataPersistence
	8,  // 10: loggingadmin.DashboardsDetails.resources:type_name -> loggingadmin.ResourceRequirements
	9,  // 11: loggingadmin.ResourceRequirements.requests:type_name -> loggingadmin.ComputeResourceQuantities
	9,  // 12: loggingadmin.ResourceRequirements.limits:type_name -> loggingadmin.ComputeResourceQuantities
	3,  // 13: loggingadmin.DataDetails.cpuResources:type_name -> loggingadmin.CPUResource
	15, // 14: loggingadmin.DataDetails.nodeSelector:type_name -> loggingadmin.DataDetails.NodeSelectorEntry
	18, // 15: loggingadmin.DataDetails.tolerations:type_name -> k8s.io.api.core.v1.Toleration
	2,  // 16: loggingadmin.DataDetails.persistence:type_name -> loggingadmin.DataPersistence
	3,  // 17: loggingadmin.IngestDetails.cpuResources:type_name -> loggingadmin.CPUResource
	16, // 18: loggingadmin.IngestDetails.nodeSelector:type_name -> loggingadmin.IngestDetails.NodeSelectorEntry
	18, // 19: loggingadmin.IngestDetails.tolerations:type_name -> k8s.io.api.core.v1.Toleration
	17, // 20: loggingadmin.ControlplaneDetails.nodeSelector:type_name -> loggingadmin.ControlplaneDetails.NodeSelectorEntry
	18, // 21: loggingadmin.ControlplaneDetails.tolerations:type_name -> k8s.io.api.core.v1.Toleration
	2,  // 22: loggingadmin.ControlplaneDetails.persistence:type_name -> loggingadmin.DataPersistence
	19, // 23: loggingadmin.LoggingAdmin.GetOpensearchCluster:input_type -> google.protobuf.Empty
	19, // 24: loggingadmin.LoggingAdmin.DeleteOpensearchCluster:input_type -> google.protobuf.Empty
	0,  // 25: loggingadmin.LoggingAdmin.CreateOrUpdateOpensearchCluster:input_type -> loggingadmin.OpensearchCluster
	19, // 26: loggingadmin.LoggingAdmin.UpgradeAvailable:input_type -> google.protobuf.Empty
	19, // 27: loggingadmin.LoggingAdmin.DoUpgrade:input_type -> google.protobuf.Empty
	19, // 28: loggingadmin.LoggingAdmin.GetStorageClasses:input_type -> google.protobuf.Empty
	19, // 29: loggingadmin.LoggingAdmin.GetOpensearchStatus:input_type -> google.protobuf.Empty
	19, // 30: loggingadmin.LoggingAdminV2.GetOpensearchCluster:input_type -> google.protobuf.Empty
	19, // 31: loggingadmin.LoggingAdminV2.DeleteOpensearchCluster:input_type -> google.protobuf.Empty
	1,  // 32: loggingadmin.LoggingAdminV2.CreateOrUpdateOpensearchCluster:input_type -> loggingadmin.OpensearchClusterV2
	19, // 33: loggingadmin.LoggingAdminV2.UpgradeAvailable:input_type -> google.protobuf.Empty
	19, // 34: loggingadmin.LoggingAdminV2.DoUpgrade:input_type -> google.protobuf.Empty
	19, // 35: loggingadmin.LoggingAdminV2.GetStorageClasses:input_type -> google.protobuf.Empty
	19, // 36: loggingadmin.LoggingAdminV2.GetOpensearchStatus:input_type -> google.protobuf.Empty
	0,  // 37: loggingadmin.LoggingAdmin.GetOpensearchCluster:output_type -> loggingadmin.OpensearchCluster
	19, // 38: loggingadmin.LoggingAdmin.DeleteOpensearchCluster:output_type -> google.protobuf.Empty
	19, // 39: loggingadmin.LoggingAdmin.CreateOrUpdateOpensearchCluster:output_type -> google.protobuf.Empty
	6,  // 40: loggingadmin.LoggingAdmin.UpgradeAvailable:output_type -> loggingadmin.UpgradeAvailableResponse
	19, // 41: loggingadmin.LoggingAdmin.DoUpgrade:output_type -> google.protobuf.Empty
	7,  // 42: loggingadmin.LoggingAdmin.GetStorageClasses:output_type -> loggingadmin.StorageClassResponse
	10, // 43: loggingadmin.LoggingAdmin.GetOpensearchStatus:output_type -> loggingadmin.StatusResponse
	1,  // 44: loggingadmin.LoggingAdminV2.GetOpensearchCluster:output_type -> loggingadmin.OpensearchClusterV2
	19, // 45: loggingadmin.LoggingAdminV2.DeleteOpensearchCluster:output_type -> google.protobuf.Empty
	19, // 46: loggingadmin.LoggingAdminV2.CreateOrUpdateOpensearchCluster:output_type -> google.protobuf.Empty
	6,  // 47: loggingadmin.LoggingAdminV2.UpgradeAvailable:output_type -> loggingadmin.UpgradeAvailableResponse
	19, // 48: loggingadmin.LoggingAdminV2.DoUpgrade:output_type -> google.protobuf.Empty
	7,  // 49: loggingadmin.LoggingAdminV2.GetStorageClasses:output_type -> loggingadmin.StorageClassResponse
	10, // 50: loggingadmin.LoggingAdminV2.GetOpensearchStatus:output_type -> loggingadmin.StatusResponse
	37, // [37:51] is the sub-list for method output_type
	23, // [23:37] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_init() }
func file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_init() {
	if File_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpensearchCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpensearchClusterV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPersistence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpensearchNodeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardsDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeAvailableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeResourceQuantities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlplaneDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_depIdxs,
		MessageInfos:      file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto = out.File
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDesc = nil
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_goTypes = nil
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_depIdxs = nil
}
