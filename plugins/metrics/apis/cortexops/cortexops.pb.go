// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v1.0.0
// source: github.com/rancher/opni/plugins/metrics/apis/cortexops/cortexops.proto

package cortexops

import (
	_ "github.com/rancher/opni/internal/codegen/cli"
	compactor "github.com/rancher/opni/internal/cortex/config/compactor"
	querier "github.com/rancher/opni/internal/cortex/config/querier"
	validation "github.com/rancher/opni/internal/cortex/config/validation"
	v1 "github.com/rancher/opni/pkg/apis/storage/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstallState int32

const (
	InstallState_Unknown      InstallState = 0
	InstallState_NotInstalled InstallState = 1
	InstallState_Updating     InstallState = 2
	InstallState_Installed    InstallState = 3
	InstallState_Uninstalling InstallState = 4
)

// Enum value maps for InstallState.
var (
	InstallState_name = map[int32]string{
		0: "Unknown",
		1: "NotInstalled",
		2: "Updating",
		3: "Installed",
		4: "Uninstalling",
	}
	InstallState_value = map[string]int32{
		"Unknown":      0,
		"NotInstalled": 1,
		"Updating":     2,
		"Installed":    3,
		"Uninstalling": 4,
	}
)

func (x InstallState) Enum() *InstallState {
	p := new(InstallState)
	*p = x
	return p
}

func (x InstallState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstallState) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes[0].Descriptor()
}

func (InstallState) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes[0]
}

func (x InstallState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstallState.Descriptor instead.
func (InstallState) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{0}
}

type DeploymentMode int32

const (
	// All components are together in a single process. Not recommended for production use.
	DeploymentMode_AllInOne DeploymentMode = 0
	// Components are distributed across multiple processes.
	DeploymentMode_HighlyAvailable DeploymentMode = 1
)

// Enum value maps for DeploymentMode.
var (
	DeploymentMode_name = map[int32]string{
		0: "AllInOne",
		1: "HighlyAvailable",
	}
	DeploymentMode_value = map[string]int32{
		"AllInOne":        0,
		"HighlyAvailable": 1,
	}
)

func (x DeploymentMode) Enum() *DeploymentMode {
	p := new(DeploymentMode)
	*p = x
	return p
}

func (x DeploymentMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentMode) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes[1].Descriptor()
}

func (DeploymentMode) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes[1]
}

func (x DeploymentMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentMode.Descriptor instead.
func (DeploymentMode) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{1}
}

type InstallStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    InstallState      `protobuf:"varint,1,opt,name=state,proto3,enum=cortexops.InstallState" json:"state,omitempty"`
	Version  string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InstallStatus) Reset() {
	*x = InstallStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallStatus) ProtoMessage() {}

func (x *InstallStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallStatus.ProtoReflect.Descriptor instead.
func (*InstallStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{0}
}

func (x *InstallStatus) GetState() InstallState {
	if x != nil {
		return x.State
	}
	return InstallState_Unknown
}

func (x *InstallStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstallStatus) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ClusterConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deployment mode to use for Cortex.
	Mode      DeploymentMode  `protobuf:"varint,1,opt,name=mode,proto3,enum=cortexops.DeploymentMode" json:"mode,omitempty"`
	Storage   *v1.StorageSpec `protobuf:"bytes,2,opt,name=storage,proto3" json:"storage,omitempty"`
	Grafana   *GrafanaConfig  `protobuf:"bytes,3,opt,name=grafana,proto3" json:"grafana,omitempty"`
	Workloads *Workloads      `protobuf:"bytes,4,opt,name=workloads,proto3" json:"workloads,omitempty"`
	Cortex    *CortexConfig   `protobuf:"bytes,5,opt,name=cortex,proto3" json:"cortex,omitempty"`
}

func (x *ClusterConfiguration) Reset() {
	*x = ClusterConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfiguration) ProtoMessage() {}

func (x *ClusterConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfiguration.ProtoReflect.Descriptor instead.
func (*ClusterConfiguration) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterConfiguration) GetMode() DeploymentMode {
	if x != nil {
		return x.Mode
	}
	return DeploymentMode_AllInOne
}

func (x *ClusterConfiguration) GetStorage() *v1.StorageSpec {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *ClusterConfiguration) GetGrafana() *GrafanaConfig {
	if x != nil {
		return x.Grafana
	}
	return nil
}

func (x *ClusterConfiguration) GetWorkloads() *Workloads {
	if x != nil {
		return x.Workloads
	}
	return nil
}

func (x *ClusterConfiguration) GetCortex() *CortexConfig {
	if x != nil {
		return x.Cortex
	}
	return nil
}

type Workloads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distributor   *CortexWorkloadSpec `protobuf:"bytes,1,opt,name=distributor,proto3" json:"distributor,omitempty"`
	Ingester      *CortexWorkloadSpec `protobuf:"bytes,2,opt,name=ingester,proto3" json:"ingester,omitempty"`
	Compactor     *CortexWorkloadSpec `protobuf:"bytes,3,opt,name=compactor,proto3" json:"compactor,omitempty"`
	StoreGateway  *CortexWorkloadSpec `protobuf:"bytes,4,opt,name=storeGateway,proto3" json:"storeGateway,omitempty"`
	Ruler         *CortexWorkloadSpec `protobuf:"bytes,5,opt,name=ruler,proto3" json:"ruler,omitempty"`
	QueryFrontend *CortexWorkloadSpec `protobuf:"bytes,6,opt,name=queryFrontend,proto3" json:"queryFrontend,omitempty"`
	Querier       *CortexWorkloadSpec `protobuf:"bytes,7,opt,name=querier,proto3" json:"querier,omitempty"`
	Purger        *CortexWorkloadSpec `protobuf:"bytes,8,opt,name=purger,proto3" json:"purger,omitempty"`
}

func (x *Workloads) Reset() {
	*x = Workloads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workloads) ProtoMessage() {}

func (x *Workloads) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workloads.ProtoReflect.Descriptor instead.
func (*Workloads) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{2}
}

func (x *Workloads) GetDistributor() *CortexWorkloadSpec {
	if x != nil {
		return x.Distributor
	}
	return nil
}

func (x *Workloads) GetIngester() *CortexWorkloadSpec {
	if x != nil {
		return x.Ingester
	}
	return nil
}

func (x *Workloads) GetCompactor() *CortexWorkloadSpec {
	if x != nil {
		return x.Compactor
	}
	return nil
}

func (x *Workloads) GetStoreGateway() *CortexWorkloadSpec {
	if x != nil {
		return x.StoreGateway
	}
	return nil
}

func (x *Workloads) GetRuler() *CortexWorkloadSpec {
	if x != nil {
		return x.Ruler
	}
	return nil
}

func (x *Workloads) GetQueryFrontend() *CortexWorkloadSpec {
	if x != nil {
		return x.QueryFrontend
	}
	return nil
}

func (x *Workloads) GetQuerier() *CortexWorkloadSpec {
	if x != nil {
		return x.Querier
	}
	return nil
}

func (x *Workloads) GetPurger() *CortexWorkloadSpec {
	if x != nil {
		return x.Purger
	}
	return nil
}

type CortexWorkloadSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of replicas to run for this workload. Should be an odd number.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// Any additional arguments to pass to Cortex.
	ExtraArgs []string `protobuf:"bytes,2,rep,name=extraArgs,proto3" json:"extraArgs,omitempty"`
}

func (x *CortexWorkloadSpec) Reset() {
	*x = CortexWorkloadSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CortexWorkloadSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CortexWorkloadSpec) ProtoMessage() {}

func (x *CortexWorkloadSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CortexWorkloadSpec.ProtoReflect.Descriptor instead.
func (*CortexWorkloadSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{3}
}

func (x *CortexWorkloadSpec) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *CortexWorkloadSpec) GetExtraArgs() []string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

type CortexConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits       *validation.Limits            `protobuf:"bytes,1,opt,name=limits,proto3" json:"limits,omitempty"`
	TenantLimits map[string]*validation.Limits `protobuf:"bytes,2,rep,name=tenantLimits,proto3" json:"tenantLimits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Compactor    *compactor.Config             `protobuf:"bytes,3,opt,name=compactor,proto3" json:"compactor,omitempty"`
	Querier      *querier.Config               `protobuf:"bytes,4,opt,name=querier,proto3" json:"querier,omitempty"`
}

func (x *CortexConfig) Reset() {
	*x = CortexConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CortexConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CortexConfig) ProtoMessage() {}

func (x *CortexConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CortexConfig.ProtoReflect.Descriptor instead.
func (*CortexConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{4}
}

func (x *CortexConfig) GetLimits() *validation.Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *CortexConfig) GetTenantLimits() map[string]*validation.Limits {
	if x != nil {
		return x.TenantLimits
	}
	return nil
}

func (x *CortexConfig) GetCompactor() *compactor.Config {
	if x != nil {
		return x.Compactor
	}
	return nil
}

func (x *CortexConfig) GetQuerier() *querier.Config {
	if x != nil {
		return x.Querier
	}
	return nil
}

type GrafanaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to deploy a managed Grafana instance.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// DNS name at which Grafana will be available in the browser.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *GrafanaConfig) Reset() {
	*x = GrafanaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrafanaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrafanaConfig) ProtoMessage() {}

func (x *GrafanaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrafanaConfig.ProtoReflect.Descriptor instead.
func (*GrafanaConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{5}
}

func (x *GrafanaConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GrafanaConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

var File_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDesc = []byte{
	0x0a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63,
	0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f,
	0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78,
	0x6f, 0x70, 0x73, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6c,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f,
	0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x46, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f,
	0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x0d, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f,
	0x70, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x02, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x07, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x66, 0x61,
	0x6e, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e,
	0x61, 0x12, 0x32, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x22, 0xac, 0x05, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x12, 0x7d, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x74,
	0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x42, 0x3c, 0x92, 0xc0, 0x0c, 0x38, 0x0a, 0x36,
	0x0a, 0x30, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e,
	0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x33,
	0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x42, 0x3c, 0x92, 0xc0, 0x0c, 0x38,
	0x0a, 0x36, 0x0a, 0x30, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65,
	0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72,
	0x12, 0x73, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x67, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x42,
	0x3c, 0x92, 0xc0, 0x0c, 0x38, 0x0a, 0x36, 0x0a, 0x30, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x02, 0x08, 0x01, 0x52, 0x06, 0x70,
	0x75, 0x72, 0x67, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x12, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x41, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x72, 0x67, 0x73, 0x22, 0x8f, 0x03, 0x0a, 0x0c, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x4b, 0x92, 0xc0, 0x0c, 0x47,
	0x0a, 0x45, 0x0a, 0x25, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1c, 0x09, 0x00, 0x00, 0x00, 0x00,
	0x80, 0x4f, 0x22, 0x41, 0x12, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0xc0, 0x84, 0x3d, 0x82,
	0x03, 0x05, 0x08, 0x80, 0x9a, 0x9e, 0x01, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x55, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x72, 0x1a, 0x53, 0x0a, 0x11, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x0d, 0x47, 0x72, 0x61, 0x66, 0x61,
	0x6e, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x8a, 0xc0, 0x0c, 0x07, 0x0a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x5c, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x2a, 0x33, 0x0a, 0x0e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x6c, 0x6c, 0x49, 0x6e, 0x4f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x32, 0xe1,
	0x03, 0x0a, 0x09, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x4f, 0x70, 0x73, 0x12, 0x83, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x2f, 0x82, 0xc0, 0x0c, 0x15, 0x8a, 0xc0, 0x0c, 0x11, 0x67, 0x65, 0x74, 0x2d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x12, 0x0e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f,
	0x70, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x26, 0x82, 0xc0, 0x0c, 0x0d, 0x8a, 0xc0, 0x0c, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x82,
	0xc0, 0x0c, 0x0a, 0x8a, 0xc0, 0x0c, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x10,
	0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x23, 0x82, 0xc0, 0x0c, 0x0d, 0x8a, 0xc0, 0x0c, 0x09, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x22, 0x0a, 0x2f, 0x75, 0x6e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x1a, 0x0b, 0x82, 0xc0, 0x0c, 0x07, 0x8a, 0xc0, 0x0c, 0x03, 0x6f,
	0x70, 0x73, 0x42, 0x3e, 0x82, 0xc0, 0x0c, 0x02, 0x08, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f,
	0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f,
	0x70, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescData = file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDesc
)

func file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescData)
	})
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescData
}

var file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_goTypes = []interface{}{
	(InstallState)(0),            // 0: cortexops.InstallState
	(DeploymentMode)(0),          // 1: cortexops.DeploymentMode
	(*InstallStatus)(nil),        // 2: cortexops.InstallStatus
	(*ClusterConfiguration)(nil), // 3: cortexops.ClusterConfiguration
	(*Workloads)(nil),            // 4: cortexops.Workloads
	(*CortexWorkloadSpec)(nil),   // 5: cortexops.CortexWorkloadSpec
	(*CortexConfig)(nil),         // 6: cortexops.CortexConfig
	(*GrafanaConfig)(nil),        // 7: cortexops.GrafanaConfig
	nil,                          // 8: cortexops.InstallStatus.MetadataEntry
	nil,                          // 9: cortexops.CortexConfig.TenantLimitsEntry
	(*v1.StorageSpec)(nil),       // 10: storage.StorageSpec
	(*validation.Limits)(nil),    // 11: validation.Limits
	(*compactor.Config)(nil),     // 12: compactor.Config
	(*querier.Config)(nil),       // 13: querier.Config
	(*emptypb.Empty)(nil),        // 14: google.protobuf.Empty
}
var file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_depIdxs = []int32{
	0,  // 0: cortexops.InstallStatus.state:type_name -> cortexops.InstallState
	8,  // 1: cortexops.InstallStatus.metadata:type_name -> cortexops.InstallStatus.MetadataEntry
	1,  // 2: cortexops.ClusterConfiguration.mode:type_name -> cortexops.DeploymentMode
	10, // 3: cortexops.ClusterConfiguration.storage:type_name -> storage.StorageSpec
	7,  // 4: cortexops.ClusterConfiguration.grafana:type_name -> cortexops.GrafanaConfig
	4,  // 5: cortexops.ClusterConfiguration.workloads:type_name -> cortexops.Workloads
	6,  // 6: cortexops.ClusterConfiguration.cortex:type_name -> cortexops.CortexConfig
	5,  // 7: cortexops.Workloads.distributor:type_name -> cortexops.CortexWorkloadSpec
	5,  // 8: cortexops.Workloads.ingester:type_name -> cortexops.CortexWorkloadSpec
	5,  // 9: cortexops.Workloads.compactor:type_name -> cortexops.CortexWorkloadSpec
	5,  // 10: cortexops.Workloads.storeGateway:type_name -> cortexops.CortexWorkloadSpec
	5,  // 11: cortexops.Workloads.ruler:type_name -> cortexops.CortexWorkloadSpec
	5,  // 12: cortexops.Workloads.queryFrontend:type_name -> cortexops.CortexWorkloadSpec
	5,  // 13: cortexops.Workloads.querier:type_name -> cortexops.CortexWorkloadSpec
	5,  // 14: cortexops.Workloads.purger:type_name -> cortexops.CortexWorkloadSpec
	11, // 15: cortexops.CortexConfig.limits:type_name -> validation.Limits
	9,  // 16: cortexops.CortexConfig.tenantLimits:type_name -> cortexops.CortexConfig.TenantLimitsEntry
	12, // 17: cortexops.CortexConfig.compactor:type_name -> compactor.Config
	13, // 18: cortexops.CortexConfig.querier:type_name -> querier.Config
	11, // 19: cortexops.CortexConfig.TenantLimitsEntry.value:type_name -> validation.Limits
	14, // 20: cortexops.CortexOps.GetClusterConfiguration:input_type -> google.protobuf.Empty
	3,  // 21: cortexops.CortexOps.ConfigureCluster:input_type -> cortexops.ClusterConfiguration
	14, // 22: cortexops.CortexOps.GetClusterStatus:input_type -> google.protobuf.Empty
	14, // 23: cortexops.CortexOps.UninstallCluster:input_type -> google.protobuf.Empty
	3,  // 24: cortexops.CortexOps.GetClusterConfiguration:output_type -> cortexops.ClusterConfiguration
	14, // 25: cortexops.CortexOps.ConfigureCluster:output_type -> google.protobuf.Empty
	2,  // 26: cortexops.CortexOps.GetClusterStatus:output_type -> cortexops.InstallStatus
	14, // 27: cortexops.CortexOps.UninstallCluster:output_type -> google.protobuf.Empty
	24, // [24:28] is the sub-list for method output_type
	20, // [20:24] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_init() }
func file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_init() {
	if File_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workloads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CortexWorkloadSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CortexConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrafanaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_depIdxs,
		EnumInfos:         file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes,
		MessageInfos:      file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto = out.File
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDesc = nil
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_goTypes = nil
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_depIdxs = nil
}
